<?php
namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\File;
use App\Models\Dashboard;
use App\Models\DateDetail;
use App\Models\SubDetail;
use App\Models\TaskDetail;
use App\Models\NoteDetail;
use App\Models\SignatureDetail;
use Session;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Collection;
use Illuminate\Pagination\LengthAwarePaginator;

class DashboardController extends Controller
{
    public function index(){
       
        $data = [];

        $current_id = Auth::id();
        if(Auth::check() && Auth::user()->is_admin == 1) {
            $list_data = Dashboard::all();
        } else {
            $list_data = Dashboard::where('user_id', $current_id)->get();
        }
        
        if(!empty($list_data)) {
            foreach($list_data as $item) {
                $data[] = [
                    'id' => $item['id'],
                    'name' => $item['name'],
                    'name_vorgesetzter' => $item['name_vorgesetzter'],
                    'created_at' => $item['created_at']->format('Y-m-d'),
                ];
            }  
            
            $collection = collect($data);

            $sorted = $collection->sortByDesc('id');   

            $sorted->all();

            $all_data = $this->paginate($sorted);

            $all_data->withPath(url('/boarding-unterlagen'));
        }
        
        return view('online-checklist/index', ['current_id' => $current_id, 'data' => $all_data]);
    }

    public function paginate($items, $perPage = 10, $page = null, $options = [])
    {
        $page = $page ?: (Paginator::resolveCurrentPage() ?: 1);
        $items = $items instanceof Collection ? $items : Collection::make($items);
        return new LengthAwarePaginator($items->forPage($page, $perPage), $items->count(), $perPage, $page, $options);
    }

    public function create(){
        $current_id = Auth::id();
        $user_info = DB::table('users')->where('id', $current_id)->select('abbreviations', 'full_name')->first();

        $list_category = DB::table('category')->get();
        $list_tab_form = DB::table('tab_form')->get();
        $list_position = DB::table('position')->get();

        $list_group_users = [];
        $group_users = DB::table('group_users')->get();
        if(!empty($group_users)){
            foreach($group_users as $group_user){
                $list_group_users[$group_user->group_id] = [
                    'id' => $group_user->group_id,
                    'name' => $group_user->group_name,
                ];

                $user_id_group = DB::table('users')->where('group_id', $group_user->group_id)->get();
                if($user_id_group) {
                    foreach($user_id_group as $user_id){
                        $list_group_users[$group_user->group_id]['users'][] = $user_id->id;
                    }    
                }
                
            }
        }

        $list_task = [];
        $tasks = DB::table('list_task')->get();
        if(!empty($tasks)){
            foreach($tasks as $task){
                $list_task[$task->category_id][] = [
                    'id' => $task->id,
                    'name' => $task->name,
                    'category_id' => $task->category_id,
                ];
            }
        }

        $data = [
            'abbreviations' => $user_info->abbreviations,
            'full_name' => $user_info->full_name,
            'list_group_users' => $list_group_users,
            'list_category' => $list_category,
            'list_tab_form' => $list_tab_form,
            'list_position' => $list_position,
            'list_task' => $list_task,
        ];
        return view('online-checklist/create', $data);
    }

    public function store(Request $request)
    {
        $user = Auth::user();
       
        $validator = Validator::make($request->all(), [
            'floatingName' => 'required',
            'floatingSelect' => 'required',
            'name_vorgesetzter'=> 'required'
        ]);

        if ($validator->fails()) {
            $messages = $validator->messages();
            return redirect('boarding-unterlagen')->withErrors($messages);
        } else {
            
            $name = $request->input('floatingName');
            $position_id = $request->input('floatingSelect');
            $name_vorgesetzter = $request->input('name_vorgesetzter');

            $data = [
                'name' => $name,
                'user_id' => Auth::id(),
                'position_id' => $position_id,
                'name_vorgesetzter' => $name_vorgesetzter,
            ];
            $form_id = Dashboard::create($data);
            if($form_id) {
                if ($request->has('category_date_detail')) {
                    $category = [];
                    $category_date_detail = $request->input('category_date_detail');
                    foreach ($category_date_detail as $key => $category_date) {
                        $tab_id = explode('_', $key);
                        foreach ($category_date as $key_cat => $date) {

                            if(isset($date['checkbox']) && !empty($date['checkbox'])) {
                                $confirmed = 1;
                            } else {
                                $confirmed = 0;
                            }
                            
                            $category = [
                                'form_id' => $form_id->id,
                                'tab_id' => (int)$tab_id[1],
                                'type' => $key_cat,
                                'confirmed' => $confirmed,
                            ];

                            if(isset($date['datetime']) && !empty($date['datetime'])) {
                                $category['created'] = date("Y-m-d", strtotime($date['datetime']));
                            } 

                            $create_category = DateDetail::create($category);
                           
                        }
                    }
                }
              
                if ($request->has('category_sub_detail')) {
                    $sub = [];
                    $category_sub_detail = $request->input('category_sub_detail');
                    foreach ($category_sub_detail as $key => $category_sub) {
                        $category_id = explode('_', $key);
                        
                        $sub = [
                            'form_id' => $form_id->id,
                            'tab_id' => (int)$category_id[1],
                            'category_id' => (int)$category_id[0],
                        ];

                        if(isset($category_sub) && !empty($category_sub)) {
                            $sub['created'] = date("Y-m-d", strtotime($category_sub));
                        }

                        $create_sub = SubDetail::create($sub);
                    }
                        
                }

                if ($request->has('task_detail')) {
                    $task = [];
                    $tasks_detail = $request->input('task_detail');
                    foreach ($tasks_detail as $task_detail) {

                        if(isset($task_detail['checkbox']) && !empty($task_detail['checkbox'])) {
                            $task['confirmed'] = 1;
                            $task['user_confirmed'] = Auth::id();
                        } else {
                            $task['confirmed'] = 0;
                        }

                        if(isset($task_detail['datetime']) && !empty($task_detail['datetime'])) {
                            $task['created'] = date("Y-m-d", strtotime($task_detail['datetime']));
                        }

                        if(isset($task_detail['ids']) && !empty($task_detail['ids'])) {
                            $ids = explode(',', $task_detail['ids']);
                            foreach ($ids as $id) {
                                $task = [
                                    'form_id' => $form_id->id,
                                    'tab_id' => $task_detail['tab_form'],
                                    'category_id' => $task_detail['cat_id'],
                                    'task_id' => $task_detail['task_id'],
                                    'user_id' => $id,
                                ];

                                $create_sub = TaskDetail::create($task);
                            }
                        }
                    }
                        
                }

                if ($request->has('note_detail')) {
                    $note = [];
                    $notes_detail = $request->input('note_detail');
                    foreach ($notes_detail as $key => $note_detail) {
                        $note = [
                            'form_id' => $form_id->id,
                            'tab_id' => (int)$key,
                            'content' => $note_detail,
                        ];
                        $create_note = NoteDetail::create($note);
                    }
                }

                if ($request->has('signature_detail')) {
                    $signature = [];
                    $signatures_detail = $request->input('signature_detail');
                    foreach ($signatures_detail as $key => $signature_detail) {
                        $signature = [
                            'form_id' => $form_id->id,
                            'tab_id' => (int)$key,
                        ];
                        if(isset($signature_detail[0]) && !empty($signature_detail[0])) {
                            $signature['unterschrift_mitarbeiter'] = $signature_detail[0];
                        }
                        if(isset($signature_detail[1]) && !empty($signature_detail[1])) {
                            $signature['unterschrift_manager'] = $signature_detail[1];
                        }
                        $create_signature = SignatureDetail::create($signature);
                    }
                }
            }

            if($form_id) {
                $msg_create = [
                    'msg' => 'Create success!',
                    'code' => 200
                ];
            } else {
                $msg_create = [
                    'msg' => 'Create failure!',
                    'code' => 400
                ];
            }
            
            return redirect('boarding-unterlagen')->with('msg_create', $msg_create);
        }
    }

    public function update(Request $request, $id)
    {
        $user = Auth::user();
       
        $validator = Validator::make($request->all(), [
            'floatingName' => 'required',
            'floatingSelect' => 'required',
            'name_vorgesetzter'=> 'required'
        ]);

        if ($validator->fails()) {
            $messages = $validator->messages();
            return redirect('boarding-unterlagen')->withErrors($messages);
        } else {

            $name = $request->input('floatingName');
            $position_id = $request->input('floatingSelect');
            $name_vorgesetzter = $request->input('name_vorgesetzter');

            $data = [
                'name' => $name,
                'position_id' => $position_id,
                'name_vorgesetzter' => $name_vorgesetzter,
            ];

            $update = Dashboard::where(['id' => $id])->update($data);

            if ($request->has('category_date_detail')) {
                $category_date_detail = $request->input('category_date_detail');
                dd($category_date_detail);
            }
            
            if($update) {
                $msg_update = [
                    'msg' => 'Update success!',
                    'code' => 200
                ];
            } else {
                $msg_update = [
                    'msg' => 'Update failure!',
                    'code' => 400
                ];
            }
            
            return redirect('boarding-unterlagen')->with('msg_update', $msg_update);
        }
    }

    public function edit($id)
    {
        if(!empty($id)) {

            $current_id = Auth::id();
            $user_info = DB::table('users')->where('id', $current_id)->select('abbreviations')->first();
            $dashboard = Dashboard::where('id', $id)->first();
            $list_category = DB::table('category')->get();
            $list_tab_form = DB::table('tab_form')->get();
            $list_position = DB::table('position')->get();

            $date_detail = DateDetail::where('form_id', $id)->get();
            $sub_detail = SubDetail::where('form_id', $id)->get();
            $task_detail = TaskDetail::where('form_id', $id)->get();
            $note_detail = NoteDetail::where('form_id', $id)->get();
            $signature_detail = SignatureDetail::where('form_id', $id)->get();
            
            $list_task = [];
            $tasks = DB::table('list_task')->get();
            if(!empty($tasks)){
                foreach($tasks as $task){
                    $list_task[$task->category_id][] = [
                        'id' => $task->id,
                        'name' => $task->name,
                        'category_id' => $task->category_id,
                    ];
                }
            }

            $group_users_task = [];
            // $task_detail = json_decode($checklist->task_detail, true);
            // if($task_detail) {
            //     foreach($task_detail as $key => $task){
            //         $list_ids = explode(',', $task["ids"]);
            //         foreach($list_ids as $user_id_task) {
            //             $first_user_info = DB::table('users')->where('id', $user_id_task)->select('full_name', 'group_id')->first();
            //             if(isset($first_user_info->group_id)){
            //                 $user_group_id = $first_user_info->group_id;
            //                 $first_user_group = DB::table('group_users')->where('group_id', $user_group_id)->first();
            //                 if(!empty($first_user_info) && !empty($first_user_group)) {
            //                     $group_users_task[$key][] = [
            //                         'sub_user_id' => $user_id_task,
            //                         'sub_full_name' => $first_user_info->full_name,
            //                         'sub_group_id' => $first_user_group->group_id ? $first_user_group->group_id : '',
            //                         'sub_group_name' => $first_user_group->group_name ? $first_user_group->group_name : '',
            //                     ];
            //                 }
            //             } 
            //         }
            //     }
            // }
            
            $list_group_users = [];
            $group_users = DB::table('group_users')->get();
            if(!empty($group_users)){
                foreach($group_users as $group_user){
                    $list_group_users[$group_user->group_id] = [
                        'id' => $group_user->group_id,
                        'name' => $group_user->group_name,
                    ];

                    $user_id_group = DB::table('users')->where('group_id', $group_user->group_id)->get();
                    if($user_id_group) {
                        foreach($user_id_group as $user_id){
                            $list_group_users[$group_user->group_id]['users'][] = $user_id->id;
                        }    
                    }
                    
                }
            }
            
            
            $data = [
                'form_id' => $id,
                'abbreviations' => $user_info->abbreviations,
                'dashboard' => $dashboard,
                'date_detail' => $date_detail,
                'sub_detail' => $sub_detail,
                'task_detail' => $task_detail,
                'note_detail' => $note_detail,
                'signature_detail' => $signature_detail,
                'list_category' => $list_category,
                'list_tab_form' => $list_tab_form,
                'list_position' => $list_position,
                'list_task' => $list_task,
                'list_group_users' => $list_group_users,
                'group_users_task' => $group_users_task,
            ];

            return view('online-checklist/edit', $data);
        } else {
            return redirect('boarding-unterlagen')->with('msg_edit', 'Cannot be edited, please check again.');
        }
    }


    public function list() {
        $current_id = Auth::id();
        $list = DB::table('task_detail')
        ->join('users','users.id','=','task_detail.user_id')
        ->join('list_task','list_task.id','=','task_detail.task_id')
        ->join('category_sub_detail','category_sub_detail.category_id','=','task_detail.category_id')
        ->whereColumn('category_sub_detail.form_id', '=', 'task_detail.form_id') //second join condition
        ->get(['users.name as user_name','users.email', 'task_detail.*','list_task.name as task_name','category_sub_detail.id as category_id','category_sub_detail.created as deadline']);

        $data = [
            'tasks' => $list
        ];
        return view('dashboard', $data);
    }
}